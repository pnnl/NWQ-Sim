import sys
import os
import time
import numpy as np
from qiskit import QuantumCircuit
from qiskit_aer import AerSimulator
from qiskit.qasm2 import load

def benchmark_honeycomb_qiskit():
    """Benchmark honeycomb code circuits using Qiskit with stabilizer method"""
    
    # Input and output directories
    input_dir = "honeycomb_bench/"
    output_dir = "honeycomb_bench/"
    os.makedirs(output_dir, exist_ok=True)
    
    # Test parameters - only varying distance
    distances = [3, 5, 7, 9, 11, 13]
    
    # Initialize Qiskit stabilizer simulator
    simulator = AerSimulator(method='stabilizer')
    
    for distance in distances:
        try:
            print(f"Processing: d={distance}")
            
            # Load QASM file generated by Stim
            qasm_filename = f"{input_dir}honeycomb_d{distance}.qasm"
            
            if not os.path.exists(qasm_filename):
                print(f"QASM file not found: {qasm_filename}")
                continue
                
            # Load circuit from QASM
            circuit = load(qasm_filename)
            
            # Add measurements to all qubits for simulation
            circuit.measure_all()
            
            # Benchmark Qiskit simulation
            start_time = time.time()
            
            # Run simulation
            shots = 1000
            result = simulator.run(circuit).result()            
            end_time = time.time()
            sim_time = end_time - start_time
            
            print(f"Sim time: {sim_time:.6f}s")
            print(f"Qubits: {circuit.num_qubits}")
            print(f"Gates: {len(circuit.data)}")
            
            # Write benchmark results
            filename = f"{output_dir}qiskit_honeycomb_d{distance}.txt"
            with open(filename, "w") as outfile:
                outfile.write("qiskit\n")
                outfile.write(f"{sim_time:.6f}\n")
                outfile.write(f"{circuit.num_qubits}\n")
                outfile.write(f"{len(circuit.data)}\n")  # Number of operations
                outfile.write(f"{distance}\n")      # Distance parameter
            
        except Exception as e:
            print(f"Error processing d={distance}: {e}")
            continue

if __name__ == "__main__":
    benchmark_honeycomb_qiskit()