# Specify a minimum CMake version
cmake_minimum_required(VERSION 3.20) 

if(DEFINED ENV{cc} AND DEFINED ENV{CC})
    message("Environment variables cc and CC are set")
    set(CMAKE_C_COMPILER "$ENV{cc}")
    set(CMAKE_CXX_COMPILER "$ENV{CC}")
else()
    message("Environment variables cc and/or CC are not set, using default settings")
endif()


# Specify the project details
project(MyPackage
        VERSION 0.0.1
        DESCRIPTION "NWQSim Qasm"
        LANGUAGES C CXX)

# Set C++ and CUDA standards
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if (NOT XACC_DIR)
  set(XACC_DIR "$ENV{HOME}/.xacc")
endif()

if ( NOT DEFINED TAMM_DIR )
  set(TAMM_DIR "${CMAKE_SOURCE_DIR}/../tamm_install"
      CACHE PATH "Path to external TAMM installation")
endif()

list(APPEND CMAKE_PREFIX_PATH "${TAMM_DIR}")

# Find required packages
find_package(CUDAToolkit)
find_package(MPI)
find_package(OpenMP)
find_package(XACC QUIET)
find_package(HIP QUIET)
find_package(LAPACK)
find_package(BLAS)
find_package(TAMM)

get_target_property(_mpi_includes MPI::MPI_CXX INTERFACE_INCLUDE_DIRECTORIES)
message(STATUS "MPI::MPI_CXX include dirs: ${_mpi_includes}")

set(ma_enable "N/A") 
if(CUDAToolkit_FOUND)

    # Set CUDA architecture
    set(CMAKE_CUDA_ARCHITECTURES "$ENV{MY_CUDA_ARCH}")

    # Check for command line option, then environment variable
    if(NOT DEFINED CUDA_ARCH)
        if(DEFINED ENV{MY_CUDA_ARCH})
            set(CMAKE_CUDA_ARCHITECTURES "$ENV{MY_CUDA_ARCH}")
        else()
            message(FATAL_ERROR "CUDA architecture is not set. Please set it manually using cmake -DCUDA_ARCH=N .. or by setting the MY_CUDA_ARCH environment variable.")
        endif()
    else()
        set(CMAKE_CUDA_ARCHITECTURES "${CUDA_ARCH}")
    endif()
    
    # set(CMAKE_CUDA_FLAGS_DEBUG "-g -G")

    set(CMAKE_CUDA_FLAGS_RELEASE "-O3")
    set(CMAKE_CUDA_STANDARD 17)
    set(CMAKE_CUDA_STANDARD_REQUIRED ON)

    if("$ENV{MY_CUDA_ARCH}" STREQUAL "80")
        add_compile_definitions(FP64_TC_AVAILABLE)
        set(ma_enable "TRUE")
    else()
        set(ma_enable "FALSE")
    endif()

    # Set the nvshmem home directory
    list(APPEND CMAKE_PREFIX_PATH $ENV{HOME}/nvshmem)

    find_package(NVSHMEM QUIET)

    if(NVSHMEM_FOUND)
        set(nvshmem_found_str "TRUE")

        set(CMAKE_CUDA_HOST_COMPILER mpicxx)
    else()
        set(nvshmem_found_str "FALSE")
    endif()
else()
    set(nvshmem_found_str "N/A")
endif()



# Path to external ITensor installation
set(ITENSOR_ROOT "${CMAKE_SOURCE_DIR}/../itensor"
    CACHE PATH "Path to external iTensor installation")

# Check that the directory and library actually exist
if (IS_DIRECTORY "${ITENSOR_ROOT}" AND EXISTS "${ITENSOR_ROOT}/lib/libitensor.a")
    set(ITENSOR_FOUND TRUE CACHE BOOL "ITensor library available")

    include_directories("${ITENSOR_ROOT}")

    add_library(itensor STATIC IMPORTED)
    set_target_properties(itensor PROPERTIES
        IMPORTED_LOCATION "${ITENSOR_ROOT}/lib/libitensor.a"
        INTERFACE_INCLUDE_DIRECTORIES "${ITENSOR_ROOT}"
    )
else()
    set(ITENSOR_FOUND FALSE CACHE BOOL "ITensor library available")
endif()

# Point to the Cray LibSci install (discover via module show / $LD_LIBRARY_PATH)
set(CRAY_LIBSCI_ROOT "/opt/cray/pe/libsci/24.07.0/NVIDIA/23.3/x86_64")

# Add its lib/ directory so that -lsci_nvidia_mpi_mp and -lsci_nvidia_mp resolve
link_directories("${CRAY_LIBSCI_ROOT}/lib")
# ————————————————————————————————————————————————————————————————

if(XACC_FOUND)
    set(xacc_found_str "TRUE")
else()
    set(xacc_found_str "FALSE")
endif()


if(HIP_FOUND)
    set(hip_found_str "TRUE")
    set(CMAKE_HIP_FLAGS_RELEASE "-O3")

    # Check for command line option, then environment variable
    if(NOT DEFINED HIP_ARCH)
        if(DEFINED ENV{MY_HIP_ARCH})
            set(CMAKE_HIP_ARCHITECTURES "$ENV{MY_HIP_ARCH}")
        else()
            message(FATAL_ERROR "HIP architecture is not set. Please set it manually using cmake -DHIP_ARCH=N .. or by setting the MY_HIP_ARCH environment variable.")
        endif()
    else()
        set(CMAKE_HIP_ARCHITECTURES "${HIP_ARCH}")
    endif()
    # set(CMAKE_HIP_ARCHITECTURES "$ENV{MY_HIP_ARCH}")
    # Check for HIP architecture and rocWMMA library
    if("$ENV{MY_HIP_ARCH}" MATCHES "gfx908|gfx90a|gfx940|gfx942")
      # Check if rocWMMA is installed
      find_path(ROCWMMA_INCLUDE_DIR
        NAMES rocwmma/rocwmma.hpp
        PATHS /opt/rocm-5.4.0/include
        NO_DEFAULT_PATH
      )

      if(ROCWMMA_INCLUDE_DIR)
        # Both conditions are met, add the definition
        add_compile_definitions(FP64_HIPMC_AVAILABLE)
        set(ma_enable "TRUE") 
        else()
        # HIP architecture matches, but rocWMMA not found
        set(ma_enable "FALSE, rocWMMA not found ") 
      endif()
    else()
      # HIP architecture doesn't match
      message(WARNING "FP64_HIPMC_AVAILABLE not defined: ")
      set(ma_enable "FALSE, MY_HIP_ARCH does not match required architectures (gfx90a|gfx940|gfx942)") 
    endif()
else()
    set(hip_found_str "FALSE")
endif()

# Print package statuses
message(STATUS "\n==================== NWQSim Environment Search Summary ===================")
message(STATUS "OpenMP found: ${OpenMP_CXX_FOUND}")
message(STATUS "MPI found: ${MPI_FOUND}")
message(STATUS "CUDA found: ${CUDAToolkit_FOUND}")
message(STATUS "HIP found: ${hip_found_str}")
message(STATUS "TAMM found: ${TAMM_FOUND}")
message(STATUS "iTensor found: ${ITENSOR_FOUND}")
message(STATUS "NVSHMEM found: ${nvshmem_found_str}")
message(STATUS "XACC found: ${xacc_found_str}")
message(STATUS "Matrix Accelerator ENABLED: ${ma_enable}")
message(STATUS "==========================================================================\n")

# Include directories
include_directories(${PROJECT_SOURCE_DIR}/include)

# Subdirectories
add_subdirectory(qasm)

if (EXISTS "${PROJECT_SOURCE_DIR}/vqe/nlopt/CMakeLists.txt")
    add_subdirectory(vqe)
endif()


if(XACC_FOUND)
    add_subdirectory(xacc)
endif()

